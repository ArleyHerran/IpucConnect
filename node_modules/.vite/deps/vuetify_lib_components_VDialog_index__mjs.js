import {
  VOverlay,
  makeVOverlayProps
} from "./chunk-ZRA5LDWE.js";
import "./chunk-6LZWEWRC.js";
import {
  useScopeId
} from "./chunk-VD2KNVJG.js";
import "./chunk-CVPZYDDT.js";
import {
  forwardRefs
} from "./chunk-3PAHN357.js";
import {
  VDialogTransition
} from "./chunk-ZMTK7WNJ.js";
import {
  VDefaultsProvider
} from "./chunk-AG2DR6BZ.js";
import "./chunk-PNXKZ654.js";
import "./chunk-G5ECUXHP.js";
import "./chunk-THB2O23C.js";
import "./chunk-WDDRUXWN.js";
import "./chunk-AADDMRJO.js";
import {
  useProxiedModel
} from "./chunk-QWSPHZ4S.js";
import "./chunk-MTZEPEKO.js";
import {
  IN_BROWSER,
  focusableChildren,
  genericComponent,
  propsFactory,
  useRender
} from "./chunk-ASKZGE63.js";
import {
  computed,
  createVNode,
  mergeProps,
  nextTick,
  ref,
  watch
} from "./chunk-J6475X5X.js";
import "./chunk-CQXHTUV2.js";

// node_modules/vuetify/lib/components/VDialog/VDialog.mjs
import "C:/ARLEY ARCHIVOS DE PROGRAMAS/XAMPP/htdocs/ArleyHerran/vue/vuetify/Membresia Ipuc/sitios/SgmIpuc/node_modules/vuetify/lib/components/VDialog/VDialog.css";
var makeVDialogProps = propsFactory({
  fullscreen: Boolean,
  retainFocus: {
    type: Boolean,
    default: true
  },
  scrollable: Boolean,
  ...makeVOverlayProps({
    origin: "center center",
    scrollStrategy: "block",
    transition: {
      component: VDialogTransition
    },
    zIndex: 2400
  })
}, "VDialog");
var VDialog = genericComponent()({
  name: "VDialog",
  props: makeVDialogProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      scopeId
    } = useScopeId();
    const overlay = ref();
    function onFocusin(e) {
      var _a, _b;
      const before = e.relatedTarget;
      const after = e.target;
      if (before !== after && ((_a = overlay.value) == null ? void 0 : _a.contentEl) && // We're the topmost dialog
      ((_b = overlay.value) == null ? void 0 : _b.globalTop) && // It isn't the document or the dialog body
      ![document, overlay.value.contentEl].includes(after) && // It isn't inside the dialog body
      !overlay.value.contentEl.contains(after)) {
        const focusable = focusableChildren(overlay.value.contentEl);
        if (!focusable.length)
          return;
        const firstElement = focusable[0];
        const lastElement = focusable[focusable.length - 1];
        if (before === firstElement) {
          lastElement.focus();
        } else {
          firstElement.focus();
        }
      }
    }
    if (IN_BROWSER) {
      watch(() => isActive.value && props.retainFocus, (val) => {
        val ? document.addEventListener("focusin", onFocusin) : document.removeEventListener("focusin", onFocusin);
      }, {
        immediate: true
      });
    }
    watch(isActive, async (val) => {
      var _a, _b;
      await nextTick();
      if (val) {
        (_a = overlay.value.contentEl) == null ? void 0 : _a.focus({
          preventScroll: true
        });
      } else {
        (_b = overlay.value.activatorEl) == null ? void 0 : _b.focus({
          preventScroll: true
        });
      }
    });
    const activatorProps = computed(() => mergeProps({
      "aria-haspopup": "dialog",
      "aria-expanded": String(isActive.value)
    }, props.activatorProps));
    useRender(() => {
      const [overlayProps] = VOverlay.filterProps(props);
      return createVNode(VOverlay, mergeProps({
        "ref": overlay,
        "class": ["v-dialog", {
          "v-dialog--fullscreen": props.fullscreen,
          "v-dialog--scrollable": props.scrollable
        }, props.class],
        "style": props.style
      }, overlayProps, {
        "modelValue": isActive.value,
        "onUpdate:modelValue": ($event) => isActive.value = $event,
        "aria-modal": "true",
        "activatorProps": activatorProps.value,
        "role": "dialog"
      }, scopeId), {
        activator: slots.activator,
        default: function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return createVNode(VDefaultsProvider, {
            "root": "VDialog"
          }, {
            default: () => {
              var _a;
              return [(_a = slots.default) == null ? void 0 : _a.call(slots, ...args)];
            }
          });
        }
      });
    });
    return forwardRefs({}, overlay);
  }
});
export {
  VDialog
};
//# sourceMappingURL=vuetify_lib_components_VDialog_index__mjs.js.map
